name: OWASP ZAP DAST Security Scan

on: [push]

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Dynamic Application Security Testing (DAST)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Initialize database and start vulnerable Python application
        run: |
          python -c "
          import sqlite3
          conn = sqlite3.connect('users.db')
          cursor = conn.cursor()
          cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)')
          cursor.execute('INSERT OR IGNORE INTO users (username, password) VALUES (\"admin\", \"admin123\")')
          cursor.execute('INSERT OR IGNORE INTO users (username, password) VALUES (\"user\", \"password\")')
          conn.commit()
          conn.close()
          print('Database initialized')
          "
          python vulnerable-app.py &
          echo "Super vulnerable Flask application started in background"
          
      - name: Wait for application to start
        run: sleep 10
        
      - name: Test application is running
        run: |
          curl -f http://localhost:8080/ || exit 1
          echo "Application is responding successfully"
        
      - name: OWASP ZAP Full DAST Scan
        id: zap-scan
        uses: zaproxy/action-full-scan@v0.4.0
        continue-on-error: true
        with:
          target: 'http://localhost:8080'
          cmd_options: '-a'
          fail_action: false
          allow_issue_writing: false
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          
      - name: Parse and display ZAP scan results
        if: always()
        run: |
          echo "## 🔍 OWASP ZAP DAST Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if ZAP scan reports exist
          if [ -f "report_json.json" ]; then
            echo "### 📊 ZAP Scan Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # First, let's examine the JSON structure to understand it
            echo "🔍 Debugging ZAP JSON structure..." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show the first few lines of the JSON to understand structure
            echo "**JSON Structure Preview:**" >> $GITHUB_STEP_SUMMARY
            head -10 report_json.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Try different ways to parse the JSON
            echo "**Attempting to parse vulnerabilities...**" >> $GITHUB_STEP_SUMMARY
            
            # Method 1: Try standard ZAP format
            TOTAL_ALERTS=$(jq -r '.site[].alerts | length' report_json.json 2>/dev/null | awk '{sum += $1} END {print sum+0}' || echo "Failed")
            echo "Method 1 - Total alerts: $TOTAL_ALERTS" >> $GITHUB_STEP_SUMMARY
            
            # Method 2: Try alternative format
            TOTAL_ALERTS2=$(jq -r '.alerts | length' report_json.json 2>/dev/null || echo "Failed")
            echo "Method 2 - Total alerts: $TOTAL_ALERTS2" >> $GITHUB_STEP_SUMMARY
            
            # Method 3: Try to find any alerts
            TOTAL_ALERTS3=$(jq -r '.. | objects | select(has("alerts")) | .alerts | length' report_json.json 2>/dev/null | awk '{sum += $1} END {print sum+0}' || echo "Failed")
            echo "Method 3 - Total alerts: $TOTAL_ALERTS3" >> $GITHUB_STEP_SUMMARY
            
            # Method 4: Count all objects that might be alerts
            TOTAL_ALERTS4=$(jq -r '.. | select(type == "object" and has("name") and has("risk")) | .name' report_json.json 2>/dev/null | wc -l || echo "Failed")
            echo "Method 4 - Potential alerts: $TOTAL_ALERTS4" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Try to extract actual vulnerability data
            echo "### 🔍 Raw Vulnerability Data" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show all objects that look like vulnerabilities
            echo "**Potential Vulnerabilities Found:**" >> $GITHUB_STEP_SUMMARY
            jq -r '.. | select(type == "object" and has("name") and has("risk")) | "\(.risk | ascii_upcase) | \(.name) | \(.description // .desc // "No description") | \(.url // "Unknown")"' report_json.json 2>/dev/null | head -20 >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found with this method" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show the complete JSON for debugging
            echo "### 📄 Complete ZAP JSON Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>Click to view full JSON report</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat report_json.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            
          elif [ -f "report_md.md" ]; then
            echo "### 📄 ZAP Markdown Report Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Markdown Report Preview:**" >> $GITHUB_STEP_SUMMARY
            head -50 report_md.md >> $GITHUB_STEP_SUMMARY
            
          else
            echo "### ❌ No ZAP scan reports found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The ZAP full scan may have failed or no reports were generated." >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for more details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "📅 ZAP DAST scan completed at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🎯 Target: http://localhost:8080" >> $GITHUB_STEP_SUMMARY
          echo "🛡️ Scanner: OWASP ZAP Full Scan" >> $GITHUB_STEP_SUMMARY
